package cft.petrov;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

/**
 * Класс-анализатор аргументов командной строки.
 * Идея в том, чтобы в одном классе учесть все возможные ошибки пользователя,
 * связанные с именами аргументов, их количеством и последовательностью.
 * Гарантирует, что или с аргументами все будет в порядке, или программа преждевременно завершится
 * при первой встреченной ошибке и выведет справку со всеми требованиями к переданным аргументам.
 * Это позволяет пользователю быстро обнаружить и исправить все (а их может быть много) ошибочные аргументы.
 */
public class ArgsValidator {
    // минимально допустимое кол-во аргументов
    private static final int MIN_COUNT_ARGS = 3;

    private final String[] args;

    public ArgsValidator(String[] args) {
        this.args = args;
    }

    /**
     * Метод проверки корректности аргументов командной строки и порядка их следования.
     *
     * @return результат проверки (корректны / некорректны)
     */
    boolean isValidArgs() {
        // [типСортировки] типДанных выхФайл вхФайл [вхФайл2 вхФайл3 ...]
        if (args.length < MIN_COUNT_ARGS) {
            System.out.println("Число аргументов командной строки меньше минимально допустимого !");
            return false;
        }
        int i = 0;
        // первый аргумент должен быть валидным ключом режима сортировки или типа данных
        if (!args[i].matches("^-[aAdDiIsS]$")) {
            System.out.println("Неверно указан первый аргумент командной строки !");
            return false;
        }
        // если первый аргумент - ключ режима сортировки
        if (args[i].matches("^-[aAdD]$")) {
            i++; // переход к следующему аргументу, к-й должен быть ключом типа данных
        }
        if (!args[i].matches("^-[iIsS]$")) {
            System.out.println("Тип данных указан неверно, либо не указан вовсе !");
            return false;
        }
        else {
            i++; // переход к выхФайлу
            return isValidFileNames(i);
        }
    }

    /**
     * Метод проверяет, корректны ли имена файлов и количество входных файлов.
     *
     * @param  i индекс эл-та массива аргументов командной строки
     * @return результат проверки (корректны / некорректны)
     */
    private boolean isValidFileNames(int i) {
        // счетчик файлов
        int filesCounter = 0;
        // список невалидных имен входных файлов
        List<String> wrongFileNames = new ArrayList<>();

        // шаблон проверки валидности имени файла (для Windows 7)
        Pattern pattern = Pattern.compile("^(?!" + // негативная опережающая проверка: имя файла не ...
                        // одно из зарезервированных системой имен:
                        "(?:AUX|NUL|PRN|CON|COM\\d|LPT\\d)" +
                        // за которым может следовать расширение файла
                        "(?:\\.[^.]*)?$)" +
                        // имя не должно содержать следующих символов:
                        "[^*:?\"\\|/<>\\x00-\\x1f]*" +
                        // разрешение файла пусть будет ".txt" (как в примерах к ТЗ)
                        "\\.txt$"
                , Pattern.CASE_INSENSITIVE);

        for (; i < args.length; i++) {
            if (!pattern.matcher(args[i]).find()) {
                wrongFileNames.add(args[i]);
            }
            filesCounter++;
        }

        if (wrongFileNames.isEmpty()) {
            if (filesCounter < 2) {
                System.out.println("Количество файлов не должно быть меньше двух!");
                return false;
            }
            else {
                System.out.println("Все аргументы командной строки соответствуют требованиям.");
                return true;
            }
        }
        else {
            System.out.println("Были указаны невалидные имена файлов:\n" + wrongFileNames);
            return false;
        }
    }

    /**
     * Метод выводит справку со всеми требованиями к переданным командной строке аргументам.
     */
    void printArgsHint() {
        System.out.println("""
                \nОбнаружено несоответствие требованиям к одному или нескольким аргументам.
                Программа преждевременно завершила свою работу.
                Внимательно ознакомьтесь со справкой и устраните все возможные ошибки.
                               
                =====================================================С=П=Р=А=В=К=А=====================================================
                Допустимые аргументы командной строки, по порядку:
                1. режим сортировки ("-a" или "-A" - по возрастанию; "-d" или "-D" - по убыванию), необязательный
                   (по умолчанию - сортировка по возрастанию);
                2. тип данных ("-i" или "-I" - целые числа; "-s" или "-S" - строки), обязательный;
                3. имя выходного файла, обязательное;
                4. имена входных файлов, не менее одного.

                Имена файлов должны оканчиваться на ".txt", могут содержать цифры
                и НЕ могут содержать зарезервированные системой имена и ряд символов: *,:,?,",<,>,\\,|,/
                
                Подробнее об именовании файлов в Windows:
                https://learn.microsoft.com/ru-ru/windows/win32/fileio/naming-a-file?redirectedfrom=MSDN#maximum-path-length-limitation
                =======================================================================================================================
                """);
    }

}
